/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.ucsc.groupone.frameworkide;

import com.ucsc.groupone.models.FileSystemModel;
import com.ucsc.groupone.dialogs.CreateNewModel;
import com.ucsc.groupone.dialogs.CreateProject;
import com.ucsc.groupone.dialogs.EditModelDetails;
import com.ucsc.groupone.dialogs.PathPlanning;
import com.ucsc.groupone.models.ClassifierModel;
import com.ucsc.groupone.models.Coordinate;
import com.ucsc.groupone.mouseListeners.ModelOptionsPopUpClickListener;
import com.ucsc.groupone.popup.OpenProject;
import com.ucsc.groupone.utils.FileChooserOptions;
import com.ucsc.groupone.utils.PipelineConfigurer;
import com.ucsc.groupone.utils.SystemConstants;
import com.ucsc.groupone.utils.SystemVariables;
import com.ucsc.groupone.utils.TextAreaOutputStream;
import java.awt.Button;
import java.awt.Color;
import java.awt.Font;
import java.awt.Insets;
import java.awt.Point;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.PrintStream;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.BorderFactory;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTree;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.w3c.dom.Attr;
import org.w3c.dom.Document;
import org.w3c.dom.Element;

/**
 *
 * @author hashan
 */
public class MasterFrame extends javax.swing.JFrame implements MouseMotionListener, MouseListener, Runnable {

    /**
     * Creates new form MasterFrame
     */
    ClassifierModel modelIcon = null;
    Point startPoint;
    Thread thread = null;
    JTree tree;
    DefaultMutableTreeNode root;
    DefaultTreeModel model;
    DefaultTableModel tableModel = null;
    private boolean running = false;
    private Process process = null;
    private List<Coordinate> coordinateList = null;

    public MasterFrame() {
        initComponents();
        start();
        disableAllButtons(true);
        fileStructureTree.setModel(new FileSystemModel(new File(SystemVariables.projectRootFolder)));
    }

    public MasterFrame(ClassifierModel modelIcon, String projectRootFolder) {
        initComponents();
        start();
        this.modelIcon = modelIcon;
        SystemVariables.projectRootFolder = projectRootFolder;
        if (modelIcon == null) {
            disableAllButtons(true);
        } else {
            enableTrainButtons(true);
            loadModelOnWorkspace();
        }
        fileStructureTree.setModel(new FileSystemModel(new File(SystemVariables.projectRootFolder)));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        toolBar = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        predictClassifierButton = new javax.swing.JButton();
        trainClassifierButton = new javax.swing.JButton();
        testClassifierButton = new javax.swing.JButton();
        stopButton = new javax.swing.JButton();
        leftShortcuts = new javax.swing.JPanel();
        createPathPlanButton = new javax.swing.JButton();
        createRoboticArmInterfaceButton = new javax.swing.JButton();
        createModelButton = new javax.swing.JButton();
        jInternalFrame1 = new javax.swing.JInternalFrame();
        jScrollPane1 = new javax.swing.JScrollPane();
        logArea = new javax.swing.JTextArea();
        jPanel3 = new javax.swing.JPanel();
        filesFrame = new javax.swing.JInternalFrame();
        jScrollPane2 = new javax.swing.JScrollPane();
        fileStructureTree = new javax.swing.JTree();
        jInternalFrame3 = new javax.swing.JInternalFrame();
        jScrollPane4 = new javax.swing.JScrollPane();
        propertyWindow = new javax.swing.JTable();
        workspacePanel = new javax.swing.JPanel();
        mainMenu = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        createProjectFileMenu = new javax.swing.JMenuItem();
        openProjectFileMenu = new javax.swing.JMenuItem();
        closeProject = new javax.swing.JMenuItem();
        saveProjectFileMenu = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        exitFileMenu = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenuItem7 = new javax.swing.JMenuItem();
        jMenuItem8 = new javax.swing.JMenuItem();
        viewMenu = new javax.swing.JMenu();
        jMenuItem9 = new javax.swing.JMenuItem();
        jMenuItem10 = new javax.swing.JMenuItem();
        jMenuItem11 = new javax.swing.JMenuItem();
        jMenuItem12 = new javax.swing.JMenuItem();
        jMenuItem13 = new javax.swing.JMenuItem();
        toolsMenu = new javax.swing.JMenu();
        jMenuItem14 = new javax.swing.JMenuItem();
        jMenuItem15 = new javax.swing.JMenuItem();
        jMenuItem16 = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        jMenuItem17 = new javax.swing.JMenuItem();
        jMenuItem18 = new javax.swing.JMenuItem();
        jMenuItem19 = new javax.swing.JMenuItem();
        jMenuItem20 = new javax.swing.JMenuItem();
        jMenuItem21 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Framework IDE");
        setIconImage(new javax.swing.ImageIcon("/home/hashan/NetBeansProjects/FrameworkIDE/src/main/java/images/main-icon.png").getImage());

        toolBar.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(153, 153, 153)));
        toolBar.setPreferredSize(new java.awt.Dimension(757, 30));

        jLabel1.setFont(new java.awt.Font("Fira Code", 0, 13)); // NOI18N
        jLabel1.setText("MainProject > Model > Tensorflow > ObjectDetectionNotebook.ipynb");

        predictClassifierButton.setIcon(new javax.swing.ImageIcon("/home/hashan/NetBeansProjects/FrameworkIDE/src/main/java/images/predict-data.png")); // NOI18N
        predictClassifierButton.setBorder(null);
        predictClassifierButton.setBorderPainted(false);
        predictClassifierButton.setContentAreaFilled(false);
        predictClassifierButton.setFocusPainted(false);
        predictClassifierButton.setPreferredSize(new java.awt.Dimension(540, 524));
        predictClassifierButton.setRolloverIcon(new javax.swing.ImageIcon("/home/hashan/NetBeansProjects/FrameworkIDE/src/main/java/images/predict-data-black.png")); // NOI18N
        predictClassifierButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                predictClassifierButtonActionPerformed(evt);
            }
        });

        trainClassifierButton.setIcon(new javax.swing.ImageIcon("/home/hashan/NetBeansProjects/FrameworkIDE/src/main/java/images/train-data.png")); // NOI18N
        trainClassifierButton.setBorder(null);
        trainClassifierButton.setBorderPainted(false);
        trainClassifierButton.setContentAreaFilled(false);
        trainClassifierButton.setIconTextGap(0);
        trainClassifierButton.setPreferredSize(new java.awt.Dimension(540, 524));
        trainClassifierButton.setRolloverIcon(new javax.swing.ImageIcon("/home/hashan/NetBeansProjects/FrameworkIDE/src/main/java/images/train-data-black.png")); // NOI18N
        trainClassifierButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                trainClassifierButtonActionPerformed(evt);
            }
        });

        testClassifierButton.setIcon(new javax.swing.ImageIcon("/home/hashan/NetBeansProjects/FrameworkIDE/src/main/java/images/test-data.png")); // NOI18N
        testClassifierButton.setBorder(null);
        testClassifierButton.setBorderPainted(false);
        testClassifierButton.setContentAreaFilled(false);
        testClassifierButton.setFocusPainted(false);
        testClassifierButton.setPreferredSize(new java.awt.Dimension(540, 524));
        testClassifierButton.setRolloverIcon(new javax.swing.ImageIcon("/home/hashan/NetBeansProjects/FrameworkIDE/src/main/java/images/test-data-black.png")); // NOI18N
        testClassifierButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                testClassifierButtonActionPerformed(evt);
            }
        });

        stopButton.setIcon(new javax.swing.ImageIcon("/home/hashan/NetBeansProjects/FrameworkIDE/src/main/java/images/stop.png")); // NOI18N
        stopButton.setBorder(null);
        stopButton.setBorderPainted(false);
        stopButton.setContentAreaFilled(false);
        stopButton.setFocusPainted(false);
        stopButton.setPreferredSize(new java.awt.Dimension(540, 524));
        stopButton.setRolloverIcon(new javax.swing.ImageIcon("/home/hashan/NetBeansProjects/FrameworkIDE/src/main/java/images/stop-black.png")); // NOI18N
        stopButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout toolBarLayout = new javax.swing.GroupLayout(toolBar);
        toolBar.setLayout(toolBarLayout);
        toolBarLayout.setHorizontalGroup(
            toolBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(toolBarLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 815, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(trainClassifierButton, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(testClassifierButton, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(predictClassifierButton, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(stopButton, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(15, 15, 15))
        );
        toolBarLayout.setVerticalGroup(
            toolBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 29, Short.MAX_VALUE)
            .addGroup(toolBarLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(toolBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(trainClassifierButton, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(testClassifierButton, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(predictClassifierButton, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(stopButton, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
        );

        leftShortcuts.setBackground(new java.awt.Color(204, 204, 204));
        leftShortcuts.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 0, 1, new java.awt.Color(153, 153, 153)));
        leftShortcuts.setInheritsPopupMenu(true);
        leftShortcuts.setPreferredSize(new java.awt.Dimension(80, 27));

        createPathPlanButton.setIcon(new javax.swing.ImageIcon("/home/hashan/NetBeansProjects/FrameworkIDE/src/main/java/images/path-planning.png")); // NOI18N
        createPathPlanButton.setToolTipText("Create a Path Plan");
        createPathPlanButton.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(153, 153, 153)));
        createPathPlanButton.setContentAreaFilled(false);
        createPathPlanButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        createPathPlanButton.setPreferredSize(new java.awt.Dimension(80, 27));
        createPathPlanButton.setRolloverIcon(new javax.swing.ImageIcon("/home/hashan/NetBeansProjects/FrameworkIDE/src/main/java/images/path-planning-black.png")); // NOI18N
        createPathPlanButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        createPathPlanButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createPathPlanButtonActionPerformed(evt);
            }
        });

        createRoboticArmInterfaceButton.setIcon(new javax.swing.ImageIcon("/home/hashan/NetBeansProjects/FrameworkIDE/src/main/java/images/robotic-arm.png")); // NOI18N
        createRoboticArmInterfaceButton.setToolTipText("Create a Robotic Arm Interface");
        createRoboticArmInterfaceButton.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(153, 153, 153)));
        createRoboticArmInterfaceButton.setContentAreaFilled(false);
        createRoboticArmInterfaceButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        createRoboticArmInterfaceButton.setPreferredSize(new java.awt.Dimension(80, 27));
        createRoboticArmInterfaceButton.setRolloverIcon(new javax.swing.ImageIcon("/home/hashan/NetBeansProjects/FrameworkIDE/src/main/java/images/robotic-arm-black.png")); // NOI18N
        createRoboticArmInterfaceButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        createRoboticArmInterfaceButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createRoboticArmInterfaceButtonActionPerformed(evt);
            }
        });

        createModelButton.setIcon(new javax.swing.ImageIcon("/home/hashan/NetBeansProjects/FrameworkIDE/src/main/java/images/model.png")); // NOI18N
        createModelButton.setToolTipText("Create a Model");
        createModelButton.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(153, 153, 153)));
        createModelButton.setContentAreaFilled(false);
        createModelButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        createModelButton.setPreferredSize(new java.awt.Dimension(80, 27));
        createModelButton.setRolloverIcon(new javax.swing.ImageIcon("/home/hashan/NetBeansProjects/FrameworkIDE/src/main/java/images/model-black.png")); // NOI18N
        createModelButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        createModelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createModelButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout leftShortcutsLayout = new javax.swing.GroupLayout(leftShortcuts);
        leftShortcuts.setLayout(leftShortcutsLayout);
        leftShortcutsLayout.setHorizontalGroup(
            leftShortcutsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(leftShortcutsLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(leftShortcutsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(createPathPlanButton, javax.swing.GroupLayout.DEFAULT_SIZE, 92, Short.MAX_VALUE)
                    .addComponent(createRoboticArmInterfaceButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(createModelButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 0, 0))
        );
        leftShortcutsLayout.setVerticalGroup(
            leftShortcutsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(leftShortcutsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(createModelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(createPathPlanButton, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(createRoboticArmInterfaceButton, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(321, Short.MAX_VALUE))
        );

        jInternalFrame1.setBackground(new java.awt.Color(51, 51, 51));
        jInternalFrame1.setTitle("Log");
        jInternalFrame1.setToolTipText("");
        jInternalFrame1.setFont(new java.awt.Font("Fira Code", 0, 12)); // NOI18N
        jInternalFrame1.setFrameIcon(new javax.swing.ImageIcon("/home/hashan/NetBeansProjects/FrameworkIDE/src/main/java/images/log-icon.png")); // NOI18N
        jInternalFrame1.setName(""); // NOI18N
        try {
            jInternalFrame1.setSelected(true);
        } catch (java.beans.PropertyVetoException e1) {
            e1.printStackTrace();
        }
        jInternalFrame1.setVisible(true);

        jScrollPane1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        logArea.setEditable(false);
        logArea.setBackground(new java.awt.Color(255, 255, 255));
        logArea.setColumns(20);
        logArea.setFont(new java.awt.Font("Fira Code", 0, 12)); // NOI18N
        logArea.setForeground(new java.awt.Color(51, 51, 51));
        logArea.setLineWrap(true);
        logArea.setRows(5);
        logArea.setToolTipText("");
        logArea.setBorder(null);
        logArea.setFocusable(false);
        jScrollPane1.setViewportView(logArea);

        javax.swing.GroupLayout jInternalFrame1Layout = new javax.swing.GroupLayout(jInternalFrame1.getContentPane());
        jInternalFrame1.getContentPane().setLayout(jInternalFrame1Layout);
        jInternalFrame1Layout.setHorizontalGroup(
            jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
        );
        jInternalFrame1Layout.setVerticalGroup(
            jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 137, Short.MAX_VALUE)
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 1, 0, 0, new java.awt.Color(153, 153, 153)));

        filesFrame.setTitle("Files");
        filesFrame.setFont(new java.awt.Font("Fira Code", 0, 12)); // NOI18N
        filesFrame.setFrameIcon(new javax.swing.ImageIcon("/home/hashan/NetBeansProjects/FrameworkIDE/src/main/java/images/file-icon.png")); // NOI18N
        try {
            filesFrame.setSelected(true);
        } catch (java.beans.PropertyVetoException e1) {
            e1.printStackTrace();
        }
        filesFrame.setVisible(true);

        fileStructureTree.setModel(new FileSystemModel(new File("/home/hashan/FrameworkIDE")));
        fileStructureTree.setFont(new java.awt.Font("Fira Code", 0, 12)); // NOI18N
        jScrollPane2.setViewportView(fileStructureTree);

        javax.swing.GroupLayout filesFrameLayout = new javax.swing.GroupLayout(filesFrame.getContentPane());
        filesFrame.getContentPane().setLayout(filesFrameLayout);
        filesFrameLayout.setHorizontalGroup(
            filesFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 229, Short.MAX_VALUE)
        );
        filesFrameLayout.setVerticalGroup(
            filesFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(filesFrameLayout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addGap(4, 4, 4))
        );

        jInternalFrame3.setTitle("Properties");
        jInternalFrame3.setFont(new java.awt.Font("Fira Code", 0, 12)); // NOI18N
        jInternalFrame3.setFrameIcon(new javax.swing.ImageIcon("/home/hashan/NetBeansProjects/FrameworkIDE/src/main/java/images/properties-icon.png")); // NOI18N
        jInternalFrame3.setOpaque(false);
        try {
            jInternalFrame3.setSelected(true);
        } catch (java.beans.PropertyVetoException e1) {
            e1.printStackTrace();
        }
        jInternalFrame3.setVisible(true);

        propertyWindow.setFont(new java.awt.Font("Fira Code", 0, 12)); // NOI18N
        propertyWindow.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Property", "Value", ""
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        propertyWindow.setCellSelectionEnabled(true);
        propertyWindow.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                propertyWindowFocusLost(evt);
            }
        });
        jScrollPane4.setViewportView(propertyWindow);
        propertyWindow.getColumnModel().getColumn(2)
        .setMaxWidth(30);

        javax.swing.GroupLayout jInternalFrame3Layout = new javax.swing.GroupLayout(jInternalFrame3.getContentPane());
        jInternalFrame3.getContentPane().setLayout(jInternalFrame3Layout);
        jInternalFrame3Layout.setHorizontalGroup(
            jInternalFrame3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
        );
        jInternalFrame3Layout.setVerticalGroup(
            jInternalFrame3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(filesFrame)
            .addComponent(jInternalFrame3, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(filesFrame)
                .addGap(0, 0, 0)
                .addComponent(jInternalFrame3)
                .addGap(0, 0, 0))
        );

        try {
            filesFrame.setIcon(true);
        } catch (java.beans.PropertyVetoException e1) {
            e1.printStackTrace();
        }
        try {
            jInternalFrame3.setIcon(true);
        } catch (java.beans.PropertyVetoException e1) {
            e1.printStackTrace();
        }

        workspacePanel.setBackground(new java.awt.Color(255, 255, 255));
        workspacePanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                workspacePanelMouseClicked(evt);
            }
        });

        mainMenu.setName(""); // NOI18N

        fileMenu.setText("File");
        fileMenu.setFont(new java.awt.Font("Fira Code", 0, 12)); // NOI18N

        createProjectFileMenu.setFont(new java.awt.Font("Fira Code", 0, 12)); // NOI18N
        createProjectFileMenu.setText("Create Project");
        createProjectFileMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createProjectFileMenuActionPerformed(evt);
            }
        });
        fileMenu.add(createProjectFileMenu);

        openProjectFileMenu.setText("Open Project");
        openProjectFileMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openProjectFileMenuActionPerformed(evt);
            }
        });
        fileMenu.add(openProjectFileMenu);

        closeProject.setText("Close Project");
        closeProject.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeProjectActionPerformed(evt);
            }
        });
        fileMenu.add(closeProject);

        saveProjectFileMenu.setText("Save Project");
        saveProjectFileMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveProjectFileMenuActionPerformed(evt);
            }
        });
        fileMenu.add(saveProjectFileMenu);
        fileMenu.add(jSeparator1);

        exitFileMenu.setText("Exit");
        fileMenu.add(exitFileMenu);

        mainMenu.add(fileMenu);

        editMenu.setText("Edit");
        editMenu.setFont(new java.awt.Font("Fira Code", 0, 12)); // NOI18N

        jMenuItem1.setText("Undo");
        editMenu.add(jMenuItem1);

        jMenuItem2.setText("Redo");
        editMenu.add(jMenuItem2);

        jMenuItem3.setText("Cut");
        editMenu.add(jMenuItem3);

        jMenuItem4.setText("Copy");
        editMenu.add(jMenuItem4);

        jMenuItem5.setText("Paste");
        editMenu.add(jMenuItem5);

        jMenuItem6.setText("Select All");
        editMenu.add(jMenuItem6);

        jMenuItem7.setText("Find");
        editMenu.add(jMenuItem7);

        jMenuItem8.setText("Replace");
        editMenu.add(jMenuItem8);

        mainMenu.add(editMenu);

        viewMenu.setText("View");
        viewMenu.setFont(new java.awt.Font("Fira Code", 0, 12)); // NOI18N

        jMenuItem9.setText("Full Screen");
        viewMenu.add(jMenuItem9);

        jMenuItem10.setText("Debug Console");
        viewMenu.add(jMenuItem10);

        jMenuItem11.setText("Terminal");
        viewMenu.add(jMenuItem11);

        jMenuItem12.setText("Zoom In");
        viewMenu.add(jMenuItem12);

        jMenuItem13.setText("Zoom Out");
        viewMenu.add(jMenuItem13);

        mainMenu.add(viewMenu);

        toolsMenu.setText("Tools");
        toolsMenu.setFont(new java.awt.Font("Fira Code", 0, 12)); // NOI18N

        jMenuItem14.setText("XML to CSV");
        toolsMenu.add(jMenuItem14);

        jMenuItem15.setText("CSV to .record");
        toolsMenu.add(jMenuItem15);

        jMenuItem16.setText("LabelIMG");
        toolsMenu.add(jMenuItem16);

        mainMenu.add(toolsMenu);

        helpMenu.setText("Help");
        helpMenu.setFont(new java.awt.Font("Fira Code", 0, 12)); // NOI18N

        jMenuItem17.setText("Documentation");
        helpMenu.add(jMenuItem17);

        jMenuItem18.setText("Keyboard Shortcuts");
        helpMenu.add(jMenuItem18);

        jMenuItem19.setText("Submit Feedback");
        helpMenu.add(jMenuItem19);

        jMenuItem20.setText("Report a Problem");
        helpMenu.add(jMenuItem20);

        jMenuItem21.setText("About This");
        helpMenu.add(jMenuItem21);

        mainMenu.add(helpMenu);

        setJMenuBar(mainMenu);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(toolBar, javax.swing.GroupLayout.DEFAULT_SIZE, 992, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addComponent(leftShortcuts, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(workspacePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jInternalFrame1))
                .addGap(0, 0, 0)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(toolBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(leftShortcuts, javax.swing.GroupLayout.DEFAULT_SIZE, 558, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(workspacePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jInternalFrame1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
        );

        try {
            jInternalFrame1.setIcon(true);
        } catch (java.beans.PropertyVetoException e1) {
            e1.printStackTrace();
        }

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void predictClassifierButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_predictClassifierButtonActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_predictClassifierButtonActionPerformed

    private Process setProcess(Process pro) {
        if (process != null) {
            return null;
        }
        process = pro;
        return process;
    }

    private void testClassifierButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_testClassifierButtonActionPerformed
        logText("Please Wait Until The Testing Is Finished");

        String command = "python3 /home/hashan/NetBeansProjects/FrameworkIDE/src/main/java/com/ucsc/groupone/python/Predict.py "
                + modelIcon.getFigPath() + " " + modelIcon.getTiPath() + " "
                + modelIcon.getOiPath() + " " + modelIcon.getCfPath();

        try {
            String line;
            process = setProcess(Runtime.getRuntime().exec(command));
            if (process == null) {
                return;
            }

            logText("Starting Testing...");
            this.running = true;
            BufferedReader error = new BufferedReader(new InputStreamReader(process.getErrorStream()));
            error.close();
            BufferedReader input = new BufferedReader(new InputStreamReader(process.getInputStream()));
            input.close();

            OutputStream outputStream = process.getOutputStream();
            PrintStream printStream = new PrintStream(outputStream);
            printStream.println();
            printStream.flush();
            printStream.close();
            logText("Images Created At Output Directory");
            logText("Testing Completed");
            running = false;
        } catch (IOException ex) {
            Logger.getLogger(MasterFrame.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_testClassifierButtonActionPerformed

    private void createPathPlanButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createPathPlanButtonActionPerformed
        PathPlanning pathPlanning = new PathPlanning(this, true);
        if (coordinateList == null) {
            this.coordinateList = pathPlanning.showDialog(null);
        } else {
            this.coordinateList = pathPlanning.showDialog(coordinateList);
        }
    }//GEN-LAST:event_createPathPlanButtonActionPerformed

    private void createModelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createModelButtonActionPerformed
        if (modelIcon != null) {
            logText(SystemConstants.MODEL_AVAILABLE);
            return;
        }
        CreateNewModel createNewModel = new CreateNewModel(this, true);
        ClassifierModel classifierModel = createNewModel.showDialog();

        if (classifierModel == null) {
            logText(SystemConstants.MODEL_NOT_CREATED);
        } else if (!classifierModel.getPath().equals("")) {
            createModelOnWorkspace(classifierModel);
            createModelFileInFolderStructure(classifierModel);
            updateProjectFile(classifierModel.getName(), classifierModel.getPath());
        } else {
            logText(SystemConstants.INVALID_HASHMAP);
        }
    }//GEN-LAST:event_createModelButtonActionPerformed

    private void createRoboticArmInterfaceButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createRoboticArmInterfaceButtonActionPerformed
        logText("Robotic Arm Interface Clicked");
    }//GEN-LAST:event_createRoboticArmInterfaceButtonActionPerformed

    private void workspacePanelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_workspacePanelMouseClicked
//        modelIcon.requestFocusInWindow();

    }//GEN-LAST:event_workspacePanelMouseClicked

    private void trainClassifierButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_trainClassifierButtonActionPerformed

        if (modelIcon.getPipelineConfiguration() == null || modelIcon.getAnnotatedImagesPath() == null
                || modelIcon.getTrainDatasetPath() == null || modelIcon.getTestDatasetPath() == null) {
            JOptionPane.showMessageDialog(this, "Please Define Required File Paths To Start Training");
            return;
        }
        // select the pipeline config file

        if (!modelIcon.getPipelineConfiguration().contains(".config")) {
            System.out.println("ERROR");
        } else {
            logText("Reading pipeline configuration file...");
            PipelineConfigurer pc = new PipelineConfigurer();
            File file = pc.config(modelIcon.getPipelineConfiguration());
            if (file == null) {
                return;
            }
            logText("Created a new pipeline configuraton file");

//            new Thread(new Runnable() {
//                public void run() {
//                    try {
//                        process = setProcess(new ProcessBuilder(
//                                "bash",
//                                "-c",
//                                "sh " + SystemVariables.PYTHON_FOLDER + "/train.sh")
//                                .start());
//                        if (process == null) {
//                            return;
//                        }
//                        running = true;
//                        logText("Training started");
//                        TextAreaOutputStream txtStream = new TextAreaOutputStream(logArea);
//                        try (BufferedReader in = new BufferedReader(new InputStreamReader(process.getErrorStream()))) {
//                            String inputLine;
//                            while ((inputLine = in.readLine()) != null) {
//                                System.out.println(inputLine);
//                                txtStream.write(inputLine.getBytes());
//                            }
//                        }
//                        logText("Training completed");
//                        running = false;
//                    } catch (IOException ex) {
//                        Logger.getLogger(MasterFrame.class.getName()).log(Level.SEVERE, null, ex);
//                    }
//                }
//            }).start();
        }
    }//GEN-LAST:event_trainClassifierButtonActionPerformed

    private void saveProjectFileMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveProjectFileMenuActionPerformed
        if (modelIcon != null) {
            createModelFileInFolderStructure(modelIcon);
        }
    }//GEN-LAST:event_saveProjectFileMenuActionPerformed

    private void createProjectFileMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createProjectFileMenuActionPerformed
        CreateProject cp = new CreateProject(this, rootPaneCheckingEnabled);
        String returnedValue = cp.showDialog();
        if (returnedValue != null) {
            logText(returnedValue);
        }
        fileStructureTree.setModel(new FileSystemModel(new File(SystemVariables.projectRootFolder)));
    }//GEN-LAST:event_createProjectFileMenuActionPerformed

    private void propertyWindowFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_propertyWindowFocusLost
        if (tableModel.getRowCount() > 0 && modelIcon != null) {
            String newFigPath = tableModel.getValueAt(0, 1).toString();
            String newTiPath = tableModel.getValueAt(1, 1).toString();
            String newOiPath = tableModel.getValueAt(2, 1).toString();
            String newCfPath = tableModel.getValueAt(3, 1).toString();
            String newTrainDSPath = tableModel.getValueAt(4, 1).toString();
            String newTestDSPath = tableModel.getValueAt(5, 1).toString();
            String newPipelinePath = tableModel.getValueAt(6, 1).toString();
            String newNumClasses = tableModel.getValueAt(7, 1).toString();
            String newAnnotated = tableModel.getValueAt(8, 1).toString();
            String newName = tableModel.getValueAt(9, 1).toString();

            modelIcon.setFigPath(newFigPath);
            modelIcon.setTiPath(newTiPath);
            modelIcon.setOiPath(newOiPath);
            modelIcon.setCfPath(newCfPath);
            modelIcon.setTrainDatasetPath(newTrainDSPath);
            modelIcon.setTestDatasetPath(newTestDSPath);
            modelIcon.setPipelineConfiguration(newPipelinePath);
            modelIcon.setNumberOfClasses(Integer.parseInt(newNumClasses));
            modelIcon.setAnnotatedImagesPath(newAnnotated);
            modelIcon.setName(newName);
        }
    }//GEN-LAST:event_propertyWindowFocusLost

    private void openProjectFileMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openProjectFileMenuActionPerformed
        OpenProject openProject = new OpenProject(this);
        ClassifierModel projectModel = openProject.getModel();
        if (projectModel != null) {
            projectModel.setIcon(new ImageIcon(SystemConstants.PATH_TO_MODEL_ICON));
            MasterFrame masterFrame = new MasterFrame(projectModel, SystemVariables.projectRootFolder);
            masterFrame.setVisible(true);
            masterFrame.setLocationRelativeTo(null);
            this.dispose();
        }
    }//GEN-LAST:event_openProjectFileMenuActionPerformed

    private void closeProjectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeProjectActionPerformed
        this.dispose();
        StartFrame sf = new StartFrame();
        sf.setVisible(true);
        sf.setLocationRelativeTo(null);
    }//GEN-LAST:event_closeProjectActionPerformed

    private void stopButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopButtonActionPerformed
        if (process != null) {
            try {
                process.waitFor();
                System.out.println(process.destroyForcibly().isAlive());
                logText("Stopped By User");
                this.running = false;
            } catch (InterruptedException ex) {
                Logger.getLogger(MasterFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_stopButtonActionPerformed

//    public void clearTree(JTree tree) {
//    DefaultTreeModel model = (DefaultTreeModel)tree.getModel();
//DefaultMutableTreeNode root = (DefaultMutableTreeNode)model.getRoot();
//model.reload(root);
//}
    private void configure() {
        File fileRoot = new File("/home/hashan");

        DefaultMutableTreeNode root = new DefaultMutableTreeNode(fileRoot);
        DefaultTreeModel model = new DefaultTreeModel(root);

        File[] subItems = fileRoot.listFiles();
        for (File file : subItems) {
            root.add(new DefaultMutableTreeNode(file));
        }
//        filesTree.setModel(model);
    }

    private String getLogAreaText() {
        String logAreaText = logArea.getText();
        if (logAreaText.equals("")) {
            return logAreaText;
        } else {
            return logAreaText.concat(System.lineSeparator());
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MasterFrame.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MasterFrame.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MasterFrame.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MasterFrame.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                MasterFrame masterFrame = new MasterFrame();
                masterFrame.setLocationRelativeTo(null);
                masterFrame.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem closeProject;
    private javax.swing.JButton createModelButton;
    private javax.swing.JButton createPathPlanButton;
    private javax.swing.JMenuItem createProjectFileMenu;
    private javax.swing.JButton createRoboticArmInterfaceButton;
    private javax.swing.JMenu editMenu;
    private javax.swing.JMenuItem exitFileMenu;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JTree fileStructureTree;
    private javax.swing.JInternalFrame filesFrame;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JInternalFrame jInternalFrame1;
    private javax.swing.JInternalFrame jInternalFrame3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem10;
    private javax.swing.JMenuItem jMenuItem11;
    private javax.swing.JMenuItem jMenuItem12;
    private javax.swing.JMenuItem jMenuItem13;
    private javax.swing.JMenuItem jMenuItem14;
    private javax.swing.JMenuItem jMenuItem15;
    private javax.swing.JMenuItem jMenuItem16;
    private javax.swing.JMenuItem jMenuItem17;
    private javax.swing.JMenuItem jMenuItem18;
    private javax.swing.JMenuItem jMenuItem19;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem20;
    private javax.swing.JMenuItem jMenuItem21;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JMenuItem jMenuItem8;
    private javax.swing.JMenuItem jMenuItem9;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPanel leftShortcuts;
    private javax.swing.JTextArea logArea;
    private javax.swing.JMenuBar mainMenu;
    private javax.swing.JMenuItem openProjectFileMenu;
    private javax.swing.JButton predictClassifierButton;
    private javax.swing.JTable propertyWindow;
    private javax.swing.JMenuItem saveProjectFileMenu;
    private javax.swing.JButton stopButton;
    private javax.swing.JButton testClassifierButton;
    private javax.swing.JPanel toolBar;
    private javax.swing.JMenu toolsMenu;
    private javax.swing.JButton trainClassifierButton;
    private javax.swing.JMenu viewMenu;
    private javax.swing.JPanel workspacePanel;
    // End of variables declaration//GEN-END:variables

    private void logText(String logText) {
        if (logArea.getText().equals("")) {
            logArea.setText(">>> " + logText);
        } else {
            logArea.append(System.lineSeparator() + ">>> " + logText);
        }
    }
//
//    private void logTextAnimated(String string) {
//        String currentString = logArea.getText();
//        String newString = currentString.substring(0, currentString.length() - 3);
//        logArea.setText(newString);
//        logArea.append(string);
//    }

    private void loadModelOnWorkspace() {
        modelIcon.setVisible(true);
        modelIcon.addMouseMotionListener(this);
        modelIcon.addMouseListener(this);
        modelIcon.addMouseListener(new ModelOptionsPopUpClickListener());

        workspacePanel.add(modelIcon);
        workspacePanel.revalidate();
        workspacePanel.repaint();
        logText("Model Added");
    }

    public void removeModel() {
        File modelFile = new File(modelIcon.getPath());
        boolean isDeleted = modelFile.delete();
        updateProjectFile("", "");
        if (isDeleted) {
            logText(SystemConstants.MODEL_DELETED);
        }
        modelIcon = null;
        tableModel.setNumRows(0);

    }

    private void createModelOnWorkspace(ClassifierModel model) {
        modelIcon = model;
        modelIcon.setVisible(true);

        modelIcon.addMouseListener(this);
        modelIcon.addMouseMotionListener(this);
        modelIcon.addMouseListener(new ModelOptionsPopUpClickListener());

        workspacePanel.add(modelIcon);
        workspacePanel.revalidate();
        workspacePanel.repaint();
        logText(SystemConstants.MODEL_ADDED);
    }

    @Override
    public void mouseDragged(MouseEvent me) {
        Point location = SwingUtilities.convertPoint(modelIcon, me.getPoint(), modelIcon.getParent());
        if (modelIcon.getParent().getBounds().contains(location)) {
            Point newLocation = modelIcon.getLocation();
            newLocation.translate(location.x - startPoint.x, location.y - startPoint.y);
            newLocation.x = Math.max(newLocation.x, 0);
            newLocation.x = Math.min(newLocation.x, modelIcon.getParent().getWidth() - modelIcon.getWidth());
            newLocation.y = Math.max(newLocation.y, 0);
            newLocation.y = Math.min(newLocation.y, modelIcon.getParent().getHeight() - modelIcon.getHeight());
            modelIcon.setLocation(newLocation);
            startPoint = location;
        }
    }

    @Override
    public void mouseMoved(MouseEvent me) {
    }

    @Override
    public void mouseClicked(MouseEvent me) {
        modelIcon.requestFocus(true);
        tableModel = (DefaultTableModel) propertyWindow.getModel();
        tableModel.setNumRows(0);
//        JLabel figPathButton = new JLabel("...");
//        figPathButton.addActionListener((ActionEvent ae) -> {
//            EditModelDetails editModelDetails = new EditModelDetails(null, true);
//            ClassifierModel newModelProp = editModelDetails.showDialog(FileChooserOptions.FIG_PATH_PROPERTY,
//                    "Change Fronzen Graph Path", JFileChooser.DIRECTORIES_ONLY, SystemVariables.OBJECT_DETECTION_FOLDER);
//            modelIcon.setFigPath(newModelProp.getFigPath());
//        });

        tableModel.addRow(new Object[]{"Frozen Inference Graph", modelIcon.getFigPath(), "..."});
        tableModel.addRow(new Object[]{"Test Images Directory", modelIcon.getTiPath(), "..."});
        tableModel.addRow(new Object[]{"Output Directory", modelIcon.getOiPath(), "..."});
        tableModel.addRow(new Object[]{"Classes File", modelIcon.getCfPath(), "..."});
        tableModel.addRow(new Object[]{"Train Dataset", modelIcon.getTrainDatasetPath(), "..."});
        tableModel.addRow(new Object[]{"Test Dataset", modelIcon.getTestDatasetPath(), "..."});
        tableModel.addRow(new Object[]{"Pipeline Configuration", modelIcon.getPipelineConfiguration(), "..."});
        tableModel.addRow(new Object[]{"Number of Classes", modelIcon.getNumberOfClasses(), "..."});
        tableModel.addRow(new Object[]{"Annotated Images Directory", modelIcon.getAnnotatedImagesPath(), "..."});
        tableModel.addRow(new Object[]{"Name", modelIcon.getName(), "..."});
        tableModel.addRow(new Object[]{"Path", modelIcon.getPath()});
    }

    @Override
    public void mousePressed(MouseEvent me) {
        startPoint = SwingUtilities.convertPoint(modelIcon, me.getPoint(), modelIcon.getParent());
    }

    @Override
    public void mouseReleased(MouseEvent me) {
        startPoint = null;
    }

    @Override
    public void mouseEntered(MouseEvent me) {
    }

    @Override
    public void mouseExited(MouseEvent me) {
    }

    @Override
    public void run() {
        while (thread != null) {
            try {
                if (modelIcon != null) {
                    if (modelIcon.hasFocus()) {
                        modelIcon.setBorder(BorderFactory.createLineBorder(Color.GREEN, 2));
                    } else {
                        Point location = modelIcon.getLocation();
                        modelIcon.setBorder(BorderFactory.createLineBorder(Color.WHITE, 2));
                        modelIcon.setLocation(location);
                    }
                    if (running == false) {
                        enableTrainButtons(true);
                    } else {
                        enableTrainButtons(false);
                    }

                } else {
                    disableAllButtons(true);
                }

                Thread.sleep(100);
            } catch (InterruptedException e) {
            }

        }
        thread = null;
    }

    public void start() {
        if (thread == null) {
            thread = new Thread(this);
            thread.start();
        }
    }

    public void stop() {
        thread = null;
    }

    private void enableTrainButtons(boolean value) {
        trainClassifierButton.setEnabled(value);
        testClassifierButton.setEnabled(value);
        predictClassifierButton.setEnabled(value);
        stopButton.setEnabled(!value);
    }

    private void disableAllButtons(boolean value) {
        trainClassifierButton.setEnabled(!value);
        testClassifierButton.setEnabled(!value);
        predictClassifierButton.setEnabled(!value);
        stopButton.setEnabled(!value);
    }

//    private void makeTree(String filePath){
//        if(!SystemVariables.isProjectCreated()){
//            return;
//        }
//        root = new DefaultMutableTreeNode(new File(filePath));
//        getList(root, new File(filePath));
//        filesFrame.setLayout(new BorderLayout());
//        tree = new JTree(root);
//        model = (DefaultTreeModel) tree.getModel();
//        tree.setRootVisible(false);
//        filesFrame.add(new JScrollPane((JTree)tree),"Center");
//    }
//    
//    private void updateTree(String rootPath){
//        if(tree != null){
//            DefaultTreeModel treeModel = (DefaultTreeModel) tree.getModel();
//            treeModel.reload(root);
//            tree.expandPath(tree.getSelectionPath());
//            filesFrame.removeAll();
//            filesFrame.add(new JScrollPane((JTree) tree), "Center");
//        } else {
//            makeTree("/home/hashan/FrameworkIDE");
//        }
//    }
//    
//    public void getList(DefaultMutableTreeNode node, File f) {
//        if(!f.isDirectory()) {
//            DefaultMutableTreeNode child = new DefaultMutableTreeNode(f);
//            node.add(child);   
//        } else {
//            DefaultMutableTreeNode child = new DefaultMutableTreeNode(f);
//            node.add(child);
//            File fList[] = f.listFiles();
//            for(int i = 0; i  < fList.length; i++)
//            getList(child, fList[i]);
//        }
//    }
    private void createModelFileInFolderStructure(ClassifierModel classifierModel) {

        try {

            DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();
            DocumentBuilder docBuilder = docFactory.newDocumentBuilder();

            // root elements
            Document doc = docBuilder.newDocument();
            Element rootElement = doc.createElement("classifier");
            doc.appendChild(rootElement);

            // model elements
            Element model = doc.createElement("model");
            rootElement.appendChild(model);

            // set attribute to model element
            Attr nameAttr = doc.createAttribute("name");
            nameAttr.setValue(classifierModel.getName());
            model.setAttributeNode(nameAttr);

            Attr pathAttr = doc.createAttribute("path");
            pathAttr.setValue(classifierModel.getPath());
            model.setAttributeNode(pathAttr);

            if (classifierModel.getFigPath() != null) {
                Element figPath = doc.createElement("figPath");
                figPath.appendChild(doc.createTextNode(classifierModel.getFigPath()));
                model.appendChild(figPath);
            }

            if (classifierModel.getTiPath() != null) {
                Element tiPath = doc.createElement("tiPath");
                tiPath.appendChild(doc.createTextNode(classifierModel.getTiPath()));
                model.appendChild(tiPath);
            }

            if (classifierModel.getOiPath() != null) {
                Element oiPath = doc.createElement("oiPath");
                oiPath.appendChild(doc.createTextNode(classifierModel.getOiPath()));
                model.appendChild(oiPath);
            }

            if (classifierModel.getCfPath() != null) {
                Element cfpath = doc.createElement("cfPath");
                cfpath.appendChild(doc.createTextNode(classifierModel.getCfPath()));
                model.appendChild(cfpath);
            }

            if (classifierModel.getAnnotatedImagesPath() != null) {
                Element annotated = doc.createElement("annotatedImagesPath");
                annotated.appendChild(doc.createTextNode(classifierModel.getAnnotatedImagesPath()));
                model.appendChild(annotated);
            }

            if (classifierModel.getPipelineConfiguration() != null) {
                Element pipe = doc.createElement("pipelineConfigurationPath");
                pipe.appendChild(doc.createTextNode(classifierModel.getPipelineConfiguration()));
                model.appendChild(pipe);
            }

            if (classifierModel.getTrainDatasetPath() != null) {
                Element train = doc.createElement("trainDatasetPath");
                train.appendChild(doc.createTextNode(classifierModel.getTrainDatasetPath()));
                model.appendChild(train);
            }

            if (classifierModel.getTestDatasetPath() != null) {
                Element test = doc.createElement("testDatasetPath");
                test.appendChild(doc.createTextNode(classifierModel.getTestDatasetPath()));
                model.appendChild(test);
            }

            Element classes = doc.createElement("numberOfClasses");
            classes.appendChild(doc.createTextNode(String.valueOf(classifierModel.getNumberOfClasses())));
            model.appendChild(classes);

            // write the content into xml file
            TransformerFactory transformerFactory = TransformerFactory.newInstance();
            Transformer transformer = transformerFactory.newTransformer();
            DOMSource source = new DOMSource(doc);
            StreamResult result = new StreamResult(new File(classifierModel.getPath()));

            // Output to console for testing
            // StreamResult result = new StreamResult(System.out);
            transformer.transform(source, result);

            logText("Model saved!");

        } catch (ParserConfigurationException pce) {
            pce.printStackTrace();
        } catch (TransformerException tfe) {
            tfe.printStackTrace();
        }
//        fileStructureTree.getModel().valueForPathChanged(new TreePath(new File(SystemVariables.IDE_HOME_FOLDER)), "ClassiferModel.xml");
    }

    private void updateProjectFile(String name, String path) {
        try {

            DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();
            DocumentBuilder docBuilder = docFactory.newDocumentBuilder();

            // root elements
            Document doc = docBuilder.newDocument();
            Element rootElement = doc.createElement("project");
            doc.appendChild(rootElement);

            // model elements
            Element model = doc.createElement("model");
            rootElement.appendChild(model);

            // name elements
            Element nameEl = doc.createElement("name");
            nameEl.appendChild(doc.createTextNode(name));
            model.appendChild(nameEl);

            // path elements
            Element pathEl = doc.createElement("path");
            pathEl.appendChild(doc.createTextNode(path));
            model.appendChild(pathEl);

            // write the content into xml file
            TransformerFactory transformerFactory = TransformerFactory.newInstance();
            Transformer transformer = transformerFactory.newTransformer();
//            transformer.setOutputProperty(OutputKeys.INDENT, "ues");
//            transformer.setOutputProperty("{http://xml.apache.org/xslt}indent-amount", "2");
            DOMSource source = new DOMSource(doc);
            StreamResult result = new StreamResult(new File(SystemVariables.projectRootFolder + "/fideproject.lhp"));

            // Output to console for testing
            // StreamResult result = new StreamResult(System.out);
            transformer.transform(source, result);

            logText("Project Updated!");

        } catch (ParserConfigurationException pce) {
            pce.printStackTrace();
        } catch (TransformerException tfe) {
            tfe.printStackTrace();
        }
    }
}
